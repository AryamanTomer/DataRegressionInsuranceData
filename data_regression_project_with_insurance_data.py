# -*- coding: utf-8 -*-
"""Data Regression Project with Insurance Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QPPrPfkjBQWEP4fCGjRe3P2q7BrNLOrd
"""

import pandas as pd
import numpy as np

data = pd.read_csv("insurance.csv")

data.head()

data.shape

print("The row count of the data set {}".format(data.shape[0]))

data.info()

data.isna().sum()

data.describe()

data.duplicated().sum()

data.drop_duplicates(inplace=True)

data.duplicated().sum()

import matplotlib.pyplot as plt
import seaborn as sns

data.value_counts("sex")

sns.countplot(x="sex",data = data)
plt.show()

sns.countplot(x = "smoker", data = data)
plt.show()

sns.countplot(x = "region", data = data)
plt.show()

from sklearn import preprocessing

labelencoder = preprocessing.LabelEncoder()

data.head()

data["smoker"] = labelencoder.fit_transform(data["smoker"])
data["sex"] = labelencoder.fit_transform(data["sex"])
data["region"] = labelencoder.fit_transform(data["region"])

data.head()

data.corr()["charges"].sort_values(ascending=False)

sns.heatmap(data.corr(),annot=True,cmap="rainbow")

for i in data.columns:
  sns.displot(data[i])
  plt.title(i + " " + "distribution")
  plt.show()

colorsforx = ["Red", "Green", "Yellow", "Black", "Blue", "Grey"]
colorchanger = 0

for i in data.columns[:-1]:
  sns.scatterplot(data = data, x = i, y = "charges", color = colorsforx[colorchanger])
  plt.show()
  colorchanger += 1

x = data[["age", "sex", "bmi", "children", "smoker", "region"]]
y = data["charges"]

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.30)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler_X_train = scaler.fit_transform(x_train)
scaler_X_test = scaler.transform(x_test)

from sklearn.metrics import mean_absolute_error, mean_squared_error
def modelresults(predictions):
  print("Mean absolute error on model is {}".format(mean_absolute_error(y_test, predictions)))
  print("Root mean squared error on model is {}".format(np.sqrt(mean_squared_error(y_test, predictions))))

from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(scaler_X_train, y_train)

predslr = lr.predict(scaler_X_test)
modelresults(predslr)

from sklearn.svm import SVR
from sklearn.model_selection import GridSearchCV
svrmodel = SVR()
param_grdsvr = {'C':[0.001, 0.01, 0.1, 0.5, 1], 'kernel':['linear', 'rbf', 'poly'], 'gamma':['scale', 'auto'],'degree':[2,3,4,5]}
gridsvr = GridSearchCV(svrmodel, param_grdsvr)
gridsvr.fit(scaler_X_train, y_train)
print("Best parameters for model is {}".format(gridsvr.best_params_))

predsgridsvr = gridsvr.predict(scaler_X_test)
modelresults(predsgridsvr)

from sklearn.ensemble import RandomForestRegressor
rfrmodel = RandomForestRegressor()
param_gridrfr = {'bootstrap': [True], 'max_depth': [5, 10, 15], 'max_features': ['auto', 'log2'], 'n_estimators': [2, 3, 4, 5, 6, 7, 8, 9, 10]}
gridrfr = GridSearchCV(rfrmodel, param_gridrfr)
gridrfr.fit(scaler_X_train, y_train)

predsgridrfr = gridrfr.predict(scaler_X_test)
modelresults(predsgridrfr)

x.columns

columniterate = 1
for index in x.columns:
  mean = data[index].mean()
  print("The mean of the column {} is {}".format(columniterate, mean))
  columniterate += 1

newcustomer = np.array([39,0,30,1,0,1])

gridrfr.predict(newcustomer.reshape(1, -1))

print("The insurance cost of new customer is {}".format(gridrfr.predict(newcustomer.reshape(1, -1))[0]))